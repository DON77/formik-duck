{"version":3,"sources":["utils/api.js","ducks/form.js","components/Search.js","containers/SearchContainer.js","components/Form.js","serviceWorker.js","ducks/index.js","reducers.js","store.js","index.js"],"names":["getCountries","name","fetch","concat","then","response","json","watcherSaga","fetchCountries","FAILURE","FETCH","setCountries","countries","type","payload","countriesFailure","error","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","this","e","data","_context2","call","sent","put","t0","_marked2","Search","state","isOpen","handleChange","field","setFieldValue","target","value","_this","props","setState","handleClick","innerHTML","_this2","_this$props","form","Object","objectWithoutProperties","react_default","createElement","Fragment","assign","autoComplete","onChange","className","Boolean","length","map","country","key","onClick","formik_esm","component","Component","connect","formReducers","dispatch","apiFetch","FormikForm","handleSubmit","values","_ref","_ref$props","setSubmitting","initialValues","username","email","password","rePassword","phone","day","month","year","city","validate","errors","test","onSubmit","render","formProps","placeholder","Array","from","keys","item","reverse","disabled","isSubmitting","window","location","hostname","match","arguments","undefined","action","objectSpread","rootReducer","combineReducers","reducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","es","Form","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f2b05fe.chunk.js","sourcesContent":["export const getCountries = name => {\n  return fetch(`https://restcountries.eu/rest/v2/name/${name}`)\n    .then(response => response.json());\n};","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { getCountries } from '../utils/api.js';\n\n// Actions\n\nconst COUNTRIES = 'formik-duck/form/COUNTRIES';\nconst FAILURE = 'formik-duck/form/FAILURE';\nconst FETCH = 'formik-duck/form/FETCH';\n\n// Reducer\n\nexport default (state = { countries: [], name: '', error: {} }, action) => {\n  switch(action.type) {\n    case COUNTRIES:\n      return {\n        ...state,\n        countries: action.payload\n      };\n    case FETCH:\n      return {\n        ...state,\n        name: action.payload\n      };\n    case FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Action Creators\n\nexport const setCountries = countries => ({\n  type: COUNTRIES,\n  payload: countries\n});\n\nexport const countriesFailure = error => ({\n  type: FAILURE,\n  payload: error\n});\n\nexport const apiFetch = name => ({\n  type: FETCH,\n  payload: name\n});\n\n// Sagas\n\nexport function* watcherSaga() {\n  yield takeLatest(FETCH, fetchCountries)\n}\n\nexport function* fetchCountries(e) {\n  try {\n    const data = yield call(() => getCountries(e.payload));\n\n    yield put(setCountries(data));\n  } catch (e) {\n    yield put(countriesFailure(e));\n  }\n}","import React, { Component } from 'react';\nimport { ErrorMessage } from 'formik';\n\nclass Search extends Component {\n  state = {\n    isOpen: false\n  };\n\n  handleChange = (e, field, setFieldValue) => {\n    setFieldValue(field.name, e.target.value);\n    this.props.fetchCountries(e.target.value);\n    this.setState({\n      isOpen: true\n    });\n  };\n\n  handleClick = (e, field, setFieldValue) => {\n    setFieldValue(field.name, e.target.innerHTML);\n    this.props.fetchCountries(e.target.innerHTML);\n    this.setState({\n      isOpen: false\n    });\n  };\n\n  render() {\n    const { field, form: { setFieldValue }, ...props } = this.props;\n    return (\n      <React.Fragment>\n        <input type=\"text\" {...field} {...props} autoComplete=\"off\" onChange={e => this.handleChange(e, field, setFieldValue)} />\n        <div className={this.state.isOpen ? 'dropdown show': 'dropdown'}>\n          {Boolean(this.props.countries.length) && this.props.countries.map(country => (\n            <div key={country.name} className=\"dropdown-item\" onClick={e => this.handleClick(e, field, setFieldValue)}>{country.name}</div>\n          ))}\n        </div>\n        <ErrorMessage name={field.name} className=\"error\" component=\"span\" />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;","import { connect } from \"react-redux\";\nimport { apiFetch } from '../ducks/form';\nimport Search from '../components/Search';\n\nconst mapStateToProps = state => ({\n  countries: state.formReducers.countries,\n  error: state.formReducers.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCountries: name => dispatch(apiFetch(name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import React, { Component } from 'react';\nimport './styles.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Search from '../containers/SearchContainer';\n\nclass FormikForm extends Component {\n  handleSubmit = (values, { \n      props = this.props, \n      setSubmitting \n    }) => {\n \n    //process form submission here\n    //done submitting, set submitting to false\n    setSubmitting(false);\n    return;\n  };\n\n  render() {\n    return (\n      <Formik\n        initialValues={{\n          username: '',\n          email: '',\n          password: '',\n          rePassword: '',\n          phone: '',\n          day: '',\n          month: '',\n          year: '',\n          country: '',\n          city: ''\n        }}\n        validate={values => {\n          let errors = {};\n\n          // check for required\n          for (let key in values) {\n            if (!values[key]) {\n              errors[key] = `${key} is required`;\n            }\n          }\n\n          // check for username length\n          if (values.username && values.username.length < 6) {\n            errors.username = 'username must be at least 6 characters long';\n          }\n\n          // check for valid email\n          if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'invalid email address';\n          }\n\n          // check for strong password\n          if (values.password && !/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/i.test(values.password)) {\n            errors.password = `\n              password must contain at least 1 lowercase alphabetical character\\n\n              password must contain at least 1 uppercase alphabetical character\\n\n              password must contain at least 1 numeric character\\n\n              password must contain at least one special character\\n\n              password must be at least 8 characters long\\n\n            `;\n          }\n\n          if (values.rePassword && values.rePassword !== values.password) {\n            errors.rePassword = 'password again must be equal to password';\n          }\n\n          return errors;\n        }}\n        onSubmit={this.handleSubmit}\n        render={formProps => {\n          return (\n            <Form>\n              <Field \n                type=\"text\" \n                name=\"username\" \n                placeholder=\"Username\" \n                autoComplete=\"off\" \n              /> \n              <ErrorMessage name=\"username\" className=\"error\" component=\"span\" />\n              \n              <Field \n                type=\"text\" \n                name=\"email\" \n                placeholder=\"Email Address\" \n                autoComplete=\"off\" \n              /> \n              <ErrorMessage name=\"email\" className=\"error\" component=\"span\" />\n              \n              <Field \n                type=\"password\" \n                name=\"password\" \n                placeholder=\"Passsword\" \n                autoComplete=\"off\" \n              /> \n              <ErrorMessage name=\"password\" className=\"error\" component=\"span\" />\n\n              <Field \n                type=\"password\" \n                name=\"rePassword\" \n                placeholder=\"Password again\" \n                autoComplete=\"off\" \n              /> \n              <ErrorMessage name=\"rePassword\" className=\"error\" component=\"span\" />\n\n              <div className=\"flex\">\n                <div>\n                  <Field \n                    component=\"select\"\n                    name=\"day\" \n                    placeholder=\"Day\" \n                  >\n                    <option value=\"\">Day</option>\n                    {Array.from(Array(31).keys()).map(item => (\n                      <option key={item} value={item + 1}>{item + 1}</option>\n                    ))}\n                  </Field>\n                  <ErrorMessage name=\"day\" className=\"error\" component=\"span\" />\n                </div>\n                <div>\n                  <Field \n                    component=\"select\"\n                    name=\"month\" \n                    placeholder=\"Month\" \n                  >\n                    <option value=\"\">Month</option>\n                    {Array.from(Array(12).keys()).map(item => (\n                      <option key={item} value={item + 1}>{item + 1}</option>\n                    ))}\n                  </Field>\n                  <ErrorMessage name=\"month\" className=\"error\" component=\"span\" />\n                </div>\n                <div>\n                  <Field \n                    component=\"select\"\n                    name=\"year\" \n                    placeholder=\"Year\" \n                  >\n                    <option value=\"\">Year</option>\n                    {Array.from(Array(101).keys()).reverse().map(item => (\n                      <option key={item} value={item + 1919}>{item + 1919}</option>\n                    ))}\n                  </Field>\n                  <ErrorMessage name=\"year\" className=\"error\" component=\"span\" />\n                </div>\n              </div>\n\n              <Field \n                component={Search}\n                name=\"country\" \n                placeholder=\"Country\" \n              />\n\n              <button \n                type=\"submit\" \n                disabled={formProps.isSubmitting}>\n                  Register Form\n              </button>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nexport default FormikForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import _formReducers from './form';\n\nexport const formReducers = _formReducers;","import { combineReducers } from 'redux';\nimport * as reducers from './ducks';\n\nconst rootReducer = combineReducers(reducers);\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { watcherSaga } from './ducks/form';\nimport reducers from './reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(watcherSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Form from './components/Form';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render((\n  <Provider store={store}>\n    <Form />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}